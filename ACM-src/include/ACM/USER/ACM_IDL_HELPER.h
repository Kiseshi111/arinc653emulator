//# Copyright (c) Vanderbilt University, 2010
//# ALL RIGHTS RESERVED
//# Vanderbilt University disclaims all warranties with regard to this
//# software, including all implied warranties of merchantability
//# and fitness.  In no event shall Vanderbilt University be liable for
//# any special, indirect or consequential damages or any damages
//# whatsoever resulting from loss of use, data or profits, whether
//# in an action of contract, negligence or other tortious action,
//# arising out of or in connection with the use or performance of
//# this software.

#ifndef ACM_IDL_HELPER_H
#define ACM_IDL_HELPER_H

#include <ACM/USER/ACM_HM_TYPES.h>
#include <ACM/USER/ACM_IDL_TYPES.h>

namespace ACM_INTERFACE
{
inline	void COPY_TO_IDL_PROCESS_RESPONSE(
		/*!in*/ACM_USER::PROCESS_RESPONSE_TYPE* PROCESS_RESPONSE,
		/*!out*/ACM_INTERFACE::RMI_RESPONSE_TYPE* IDL_PROCESS_RESPONSE
		)
	{
		IDL_PROCESS_RESPONSE->NO_ERROR=PROCESS_RESPONSE->NO_ERROR;
		switch(PROCESS_RESPONSE->RESPONDING_ENTITY)
		{
		case ACM_USER::PROCESS:
			{
				IDL_PROCESS_RESPONSE->RESPONDING_ENTITY=ACM_INTERFACE::PROCESS;
				break;
			}
		case ACM_USER::HM:
			{
				IDL_PROCESS_RESPONSE->RESPONDING_ENTITY=ACM_INTERFACE::HM;
				break;
			}
		case ACM_USER::PARTITIONSCHEDULER:
			{
				IDL_PROCESS_RESPONSE->RESPONDING_ENTITY=ACM_INTERFACE::PARTITIONSCHEDULER;
				break;
			}
		};

		IDL_PROCESS_RESPONSE->TIMEOFMESSAGE =PROCESS_RESPONSE->TIMEOFMESSAGE;
		IDL_PROCESS_RESPONSE->ERROR_RESPONSE.TIMEOFMESSAGE = PROCESS_RESPONSE->ERROR_RESPONSE.TIMEOFMESSAGE;
		
		switch(PROCESS_RESPONSE->ERROR_RESPONSE.HM_MESSAGE_DISCRIMINATOR)
		{
		case ACM_USER::STRING:
			{
				IDL_PROCESS_RESPONSE->ERROR_RESPONSE.HM_MESSAGE_DISCRIMINATOR=ACM_INTERFACE::STRINGMESSAGE;
				break;
			}
		case ACM_USER::APPLICATION_SPECIFIC:
			{
				IDL_PROCESS_RESPONSE->ERROR_RESPONSE.HM_MESSAGE_DISCRIMINATOR=ACM_INTERFACE::APPLICATION_SPECIFIC;
				break;
			}

		};
		IDL_PROCESS_RESPONSE->ERROR_RESPONSE.HM_MESSAGE_LENGTH = PROCESS_RESPONSE->ERROR_RESPONSE.HM_MESSAGE_LENGTH;		
		memcpy( &(IDL_PROCESS_RESPONSE->ERROR_RESPONSE.HM_MESSAGE[0]), &(PROCESS_RESPONSE->ERROR_RESPONSE.HM_MESSAGE[0]),ERROR_RESPONSE_TYPE_MESSAGE_SIZE);
		switch(PROCESS_RESPONSE->ERROR_RESPONSE.ERROR_CODE)
		 {
		case ACM_USER::DEADLINE_MISSED:
			{
				IDL_PROCESS_RESPONSE->ERROR_RESPONSE.ERROR_CODE=ACM_INTERFACE::DEADLINE_MISSED;
				break;
			}
		case ACM_USER::APPLICATION_ERROR:
			{
				IDL_PROCESS_RESPONSE->ERROR_RESPONSE.ERROR_CODE=ACM_INTERFACE::APPLICATION_ERROR;
				break;
			}		
		case ACM_USER::NUMERIC_ERROR:
			{
				IDL_PROCESS_RESPONSE->ERROR_RESPONSE.ERROR_CODE=ACM_INTERFACE::NUMERIC_ERROR;
				break;
			}		
		case ACM_USER::ILLEGAL_REQUEST:
			{
				IDL_PROCESS_RESPONSE->ERROR_RESPONSE.ERROR_CODE=ACM_INTERFACE::ILLEGAL_REQUEST;
				break;
			}		
		case ACM_USER::STACK_OVERFLOW:
			{
				IDL_PROCESS_RESPONSE->ERROR_RESPONSE.ERROR_CODE=ACM_INTERFACE::STACK_OVERFLOW;
				break;
			}		
		case ACM_USER::MEMORY_VIOLATION:
			{
				IDL_PROCESS_RESPONSE->ERROR_RESPONSE.ERROR_CODE=ACM_INTERFACE::MEMORY_VIOLATION;
				break;
			}
		case ACM_USER::HARDWARE_FAULT:
			{
				IDL_PROCESS_RESPONSE->ERROR_RESPONSE.ERROR_CODE=ACM_INTERFACE::HARDWARE_FAULT;
				break;
			}
		case ACM_USER::POWER_FAIL:
			{
				IDL_PROCESS_RESPONSE->ERROR_RESPONSE.ERROR_CODE=ACM_INTERFACE::POWER_FAIL;
				break;
			}
		};

		 
		switch(PROCESS_RESPONSE->ERROR_RESPONSE.HM_ACTION)
		{
		case ACM_USER::HM_RESPONSE_TYPE::REFUSE:
			{
				IDL_PROCESS_RESPONSE->ERROR_RESPONSE.HM_ACTION=ACM_INTERFACE::REFUSE;
				break;
			}
		case ACM_USER::HM_RESPONSE_TYPE::IGNORE:
			{
				IDL_PROCESS_RESPONSE->ERROR_RESPONSE.HM_ACTION=ACM_INTERFACE::IGNORE;
				break;
			}
		case ACM_USER::HM_RESPONSE_TYPE::SUSPEND:
			{
				IDL_PROCESS_RESPONSE->ERROR_RESPONSE.HM_ACTION=ACM_INTERFACE::SUSPEND;
				break;
			}
		case ACM_USER::HM_RESPONSE_TYPE::STOP:
			{
				IDL_PROCESS_RESPONSE->ERROR_RESPONSE.HM_ACTION=ACM_INTERFACE::STOP;
				break;
			}
		case ACM_USER::HM_RESPONSE_TYPE::START:
			{
				IDL_PROCESS_RESPONSE->ERROR_RESPONSE.HM_ACTION=ACM_INTERFACE::START;
				break;
			}
		case ACM_USER::HM_RESPONSE_TYPE::USE_PAST_DATA:
			{
				IDL_PROCESS_RESPONSE->ERROR_RESPONSE.HM_ACTION=ACM_INTERFACE::USE_PAST_DATA;
				break;
			}
		case ACM_USER::HM_RESPONSE_TYPE::USER_SPECIFIC_RESPONSE:
			{
				IDL_PROCESS_RESPONSE->ERROR_RESPONSE.HM_ACTION=ACM_INTERFACE::USER_SPECIFIC_RESPONSE;
				break;
			}
		};
		
		return;

	}

inline	void COPY_FROM_IDL_PROCESS_RESPONSE(
		/*!out*/ACM_USER::PROCESS_RESPONSE_TYPE* PROCESS_RESPONSE,
		/*!in*/ACM_INTERFACE::RMI_RESPONSE_TYPE* IDL_PROCESS_RESPONSE
		)
	{
		PROCESS_RESPONSE->NO_ERROR=IDL_PROCESS_RESPONSE->NO_ERROR;
		switch(IDL_PROCESS_RESPONSE->RESPONDING_ENTITY)
		{
		case ACM_INTERFACE::PROCESS:
			{
				PROCESS_RESPONSE->RESPONDING_ENTITY=ACM_USER::PROCESS;
				break;
			}
		case ACM_INTERFACE::HM:
			{
				PROCESS_RESPONSE->RESPONDING_ENTITY=ACM_USER::HM;
				break;
			}
		case ACM_INTERFACE::PARTITIONSCHEDULER:
			{
				PROCESS_RESPONSE->RESPONDING_ENTITY=ACM_USER::PARTITIONSCHEDULER;
				break;
			}
		}

		PROCESS_RESPONSE->TIMEOFMESSAGE = IDL_PROCESS_RESPONSE->TIMEOFMESSAGE;
		

		//ERROR REsponse
		PROCESS_RESPONSE->ERROR_RESPONSE.TIMEOFMESSAGE = IDL_PROCESS_RESPONSE->ERROR_RESPONSE.TIMEOFMESSAGE;
		PROCESS_RESPONSE->ERROR_RESPONSE.HM_MESSAGE_LENGTH = IDL_PROCESS_RESPONSE->ERROR_RESPONSE.HM_MESSAGE_LENGTH;		
		memcpy( &(PROCESS_RESPONSE->ERROR_RESPONSE.HM_MESSAGE[0]), &(IDL_PROCESS_RESPONSE->ERROR_RESPONSE.HM_MESSAGE[0]),ERROR_RESPONSE_TYPE_MESSAGE_SIZE);


		switch(IDL_PROCESS_RESPONSE->ERROR_RESPONSE.HM_MESSAGE_DISCRIMINATOR)
		{
		case ACM_INTERFACE::STRINGMESSAGE:
			{
				PROCESS_RESPONSE->ERROR_RESPONSE.HM_MESSAGE_DISCRIMINATOR=ACM_USER::STRING;
				break;
			}
		case ACM_INTERFACE::APPLICATION_SPECIFIC:
			{
				PROCESS_RESPONSE->ERROR_RESPONSE.HM_MESSAGE_DISCRIMINATOR=ACM_USER::APPLICATION_SPECIFIC;
				break;
			}

		};


		switch(IDL_PROCESS_RESPONSE->ERROR_RESPONSE.ERROR_CODE)
		 {
		case ACM_INTERFACE::DEADLINE_MISSED:
			{
				PROCESS_RESPONSE->ERROR_RESPONSE.ERROR_CODE=ACM_USER::DEADLINE_MISSED;
				break;
			}
		case ACM_INTERFACE::APPLICATION_ERROR:
			{
				PROCESS_RESPONSE->ERROR_RESPONSE.ERROR_CODE=ACM_USER::APPLICATION_ERROR;
				break;
			}		
		case ACM_INTERFACE::NUMERIC_ERROR:
			{
				PROCESS_RESPONSE->ERROR_RESPONSE.ERROR_CODE=ACM_USER::NUMERIC_ERROR;
				break;
			}		
		case ACM_INTERFACE::ILLEGAL_REQUEST:
			{
				PROCESS_RESPONSE->ERROR_RESPONSE.ERROR_CODE=ACM_USER::ILLEGAL_REQUEST;
				break;
			}		
		case ACM_INTERFACE::STACK_OVERFLOW:
			{
				PROCESS_RESPONSE->ERROR_RESPONSE.ERROR_CODE=ACM_USER::STACK_OVERFLOW;
				break;
			}		
		case ACM_INTERFACE::MEMORY_VIOLATION:
			{
				PROCESS_RESPONSE->ERROR_RESPONSE.ERROR_CODE=ACM_USER::MEMORY_VIOLATION;
				break;
			}
		case ACM_INTERFACE::HARDWARE_FAULT:
			{
				PROCESS_RESPONSE->ERROR_RESPONSE.ERROR_CODE=ACM_USER::HARDWARE_FAULT;
				break;
			}
		case ACM_INTERFACE::POWER_FAIL:
			{
				PROCESS_RESPONSE->ERROR_RESPONSE.ERROR_CODE=ACM_USER::POWER_FAIL;
				break;
			}
		};

		switch(IDL_PROCESS_RESPONSE->ERROR_RESPONSE.HM_ACTION)
		{
		case ACM_INTERFACE::REFUSE:
			{
				PROCESS_RESPONSE->ERROR_RESPONSE.HM_ACTION=ACM_USER::HM_RESPONSE_TYPE::REFUSE;
				break;
			}
		case ACM_INTERFACE::IGNORE:
			{
				PROCESS_RESPONSE->ERROR_RESPONSE.HM_ACTION=ACM_USER::HM_RESPONSE_TYPE::IGNORE;
				break;
			}
		case ACM_INTERFACE::SUSPEND:
			{
				PROCESS_RESPONSE->ERROR_RESPONSE.HM_ACTION=ACM_USER::HM_RESPONSE_TYPE::SUSPEND;
				break;
			}
		case ACM_INTERFACE::STOP:
			{
				PROCESS_RESPONSE->ERROR_RESPONSE.HM_ACTION=ACM_USER::HM_RESPONSE_TYPE::STOP;
				break;
			}
		case ACM_INTERFACE::START:
			{
				PROCESS_RESPONSE->ERROR_RESPONSE.HM_ACTION=ACM_USER::HM_RESPONSE_TYPE::START;
				break;
			}
		case ACM_INTERFACE::USE_PAST_DATA:
			{
				PROCESS_RESPONSE->ERROR_RESPONSE.HM_ACTION=ACM_USER::HM_RESPONSE_TYPE::USE_PAST_DATA;
				break;
			}
		case ACM_INTERFACE::USER_SPECIFIC_RESPONSE:
			{
				PROCESS_RESPONSE->ERROR_RESPONSE.HM_ACTION=ACM_USER::HM_RESPONSE_TYPE::USER_SPECIFIC_RESPONSE;
				break;
			}
		};

	}	
		
}

#endif //ACM_IDL_HELPER_H


