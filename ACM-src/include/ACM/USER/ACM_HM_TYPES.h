#ifndef APEX_HM_TYPES_H
#define APEX_HM_TYPES_H
#include <ACM/USER/APEX_TYPES.h>
namespace ACM_USER {

#define USE_INFINITE_LOOP_PROTECTION pthread_testcancel();

#define MAX_HM_BUFFER_MESSGAES 20
#define MAX_HM_PROC_RELATIONSHIPS SYSTEM_LIMIT_NUMBER_OF_PROCESSES
#define ERROR_RESPONSE_TYPE_MESSAGE_SIZE 200
#define MAX_HM_RESPONSE_MESSAGE_SIZE sizeof(HM_RESPONSE_TYPE)
#define MAX_PROCESS_RESPONSE_MESSAGE_SIZE sizeof(PROCESS_RESPONSE_TYPE)

typedef APEX_INTEGER HM_DESCRIPTOR_ID_TYPE;
struct PROC_HM_ASSOCIATION_TYPE {
  PROCESS_ID_TYPE PROCESS_ID;
  BLACKBOARD_ID_TYPE BLACKBOARD_ID;
};
enum HM_MESSAGE_DISCRIMINATOR_TYPE { STRING = 0, APPLICATION_SPECIFIC = 1 };

enum TFPG_MONITOR_ALARM_TYPE {
  NO_DEFINED_ALARM = 0,
  LOCK_TIMEOUT_FAILURE = 1,
  VALIDITY_FAILURE = 2,
  PRE_CONDITION_FAILURE = 3,
  USER_CODE_FAILURE = 4,
  POST_CONDITION_FAILURE = 5,
  DEADLINE_VIOLATION = 6,
  SILENT = 7,
  PROVIDES_FAILURE = 8,
};

//! COMPONENT_OPERATIONAL_STATE_TYPE enum captures the current operational state
//! of a component.  COMPONENT_INACTIVE implies none of the Component processes
//! can be started. COMPONENT_SEMIACTIVE implies the output processes
//! (publisher/provides interface) cannot be started. COMPONENT_ACTIVE allows
//! any component process to be started.
enum COMPONENT_OPERATIONAL_STATE_TYPE {
  COMPONENT_ACTIVE = 0,
  COMPONENT_SEMIACTIVE = 1,
  COMPONENT_INACTIVE = 2

};

struct HM_RESPONSE_TYPE {
  enum HM_ACTION_ENUM_TYPE {
    REFUSE = 0,
    IGNORE = 1,
    SUSPEND = 2,
    STOP = 3,
    START = 4,
    USE_PAST_DATA = 5,
    USER_SPECIFIC_RESPONSE = 6
  };
  ERROR_CODE_TYPE ERROR_CODE; //! ARINC-653 specified error codes
  SYSTEM_TIME_TYPE TIMEOFMESSAGE;
  APEX_UNSIGNED HM_MESSAGE_LENGTH;
  HM_MESSAGE_DISCRIMINATOR_TYPE HM_MESSAGE_DISCRIMINATOR;
  APEX_BYTE HM_MESSAGE[ERROR_RESPONSE_TYPE_MESSAGE_SIZE]; //! This can
                                                          //! potentially carry
                                                          //! application
                                                          //! SPECIFIC DATA
  HM_ACTION_ENUM_TYPE HM_ACTION;
};
//! Used to reconfigure the require port connection
struct REQUIRE_RECONFIG_INFO_TYPE {
  APEX_UNSIGNED PROVIDE_COMPONENT_ID;
  APEX_UNSIGNED REQUIRE_INTERFACE_ID;
};

struct SYSTEM_HM_RESPONSE_TYPE {
  //! STOP_ALL makes Component INACTIVE,  START_ALL makes Component ACTIVE,
  //! DISABLE_OUTPUT makes Component SEMI_ACTIVE,USE_REQUIRE with
  //! REQUIRE_RECONFIG_INFO_TYPE as the HM_MESSAGE reconfigures the requires
  //! port
  enum SYSTEM_HM_ACTION_ENUM_TYPE {
    STOP_ALL = 0,
    START_ALL = 1,
    RESET_ALL = 2,
    CHECKPOINT = 3,
    RESTORE = 4,
    DISABLE_OUTPUT = 5,
    USE_REQUIRE = 6
  };
  SYSTEM_TIME_TYPE TIMEOFMESSAGE;
  APEX_UNSIGNED COMPONENT_ID;
  SYSTEM_HM_ACTION_ENUM_TYPE SHM_ACTION;

  APEX_UNSIGNED HM_MESSAGE_LENGTH;
  HM_MESSAGE_DISCRIMINATOR_TYPE HM_MESSAGE_DISCRIMINATOR;
  APEX_BYTE HM_MESSAGE[ERROR_RESPONSE_TYPE_MESSAGE_SIZE]; //! This can
                                                          //! potentially carry
                                                          //! application
                                                          //! SPECIFIC DATA
};

//! SYSTEM_HM_INPUT_TYPE - Component HM sends this information to the supervisor
//! - SystemHM
struct SYSTEM_HM_INPUT_TYPE {
  SYSTEM_TIME_TYPE TIME_OF_OCCURENCE;
  APEX_UNSIGNED PARTITION_ENUM_ID;
  APEX_UNSIGNED COMPONENT_ENUM_ID;
  APEX_UNSIGNED PROCESS_ENUM_ID;
  APEX_UNSIGNED ERROR_CODE_ENUM_ID;
  APEX_UNSIGNED HM_ACTION_ENUM_ID;
  APEX_UNSIGNED INTERFACE_ID;
  APEX_UNSIGNED NEW_COMPONENT_ID;
  APEX_UNSIGNED COMPONENT_OPERATIONAL_STATE;
};

enum RESPONDING_ENTITY_TYPE { PROCESS, HM, PARTITIONSCHEDULER };
//! USed to store the process Responses;
struct PROCESS_RESPONSE_TYPE {
  bool NO_ERROR;
  RESPONDING_ENTITY_TYPE RESPONDING_ENTITY;
  SYSTEM_TIME_TYPE TIMEOFMESSAGE;
  HM_RESPONSE_TYPE
      ERROR_RESPONSE; //! Do not read HM_RESPONSE_TYPE if there was no error
};
struct HM_DESCRIPTOR_TYPE {
  PROCESS_ID_TYPE HM_PROCESS_ID;
  BUFFER_ID_TYPE HM_BUFFER_ID;
  PROC_HM_ASSOCIATION_TYPE PROC_HM_ASSOCIATION[MAX_HM_PROC_RELATIONSHIPS];
  APEX_INTEGER CURRENTLY_REGISTERED_PROCS;
};
}
#endif // APEX_HM_TYPES_H
