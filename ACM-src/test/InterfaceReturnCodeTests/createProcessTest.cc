/*
Test of the CREATE_PROCESS service
*/
#include <ACM/USER/ACM_USER_INCLUDE.h>
using namespace ACM_USER;

PROCESS_ID_TYPE PROCESS_INVALID_MODE_ID;
PROCESS_NAME_TYPE PROCESS_INVALID_MODE_NAME = "PROCESS_INVALID_MODE";
PROCESS_ATTRIBUTE_TYPE PROCESS_INVALID_MODE_ATTR;

void PROCESS_REDUNDANT(void) {}
void PROCESS_BAD_PRIORITY(void) {}
void PROCESS_BAD_PERIOD(void) {}
void PROCESS_BAD_TIME_CAPACITY(void) {}
void PROCESS_CAPACITY_GREATER_THAN_PERIOD(void) {}
void PROCESS_INVALID_MODE(void) {}

void PROCESS_CORRECT(void) {
  RETURN_CODE_TYPE RETURN_CODE;

  CREATE_PROCESS(&PROCESS_INVALID_MODE_ATTR, &PROCESS_INVALID_MODE_ID,
                 &RETURN_CODE);
  if (RETURN_CODE == INVALID_MODE) {
    LOGGER(APP, "Invalid mode process test succeeded!");
    LOGGER(APP, "Return code is: %d", RETURN_CODE);
  } else {
    LOGGER(APP, "Invalid mode process test failed.");
    LOGGER(APP, "Return code is: %d", RETURN_CODE);
  }
}

void correctProcessTest(void) {
  RETURN_CODE_TYPE RETURN_CODE;
  PROCESS_ID_TYPE PROCESS_CORRECT_ID;
  PROCESS_NAME_TYPE PROCESS_CORRECT_NAME = "PROCESS_CORRECT";

  // create the process CORRECT process with no invalid parameters
  PROCESS_ATTRIBUTE_TYPE PROCESS_CORRECT_ATTR;
  PROCESS_CORRECT_ATTR.BASE_PRIORITY = 91;
  PROCESS_CORRECT_ATTR.PERIOD = convertSecsToNano(5);
  PROCESS_CORRECT_ATTR.TIME_CAPACITY = convertSecsToNano(5);
  PROCESS_CORRECT_ATTR.DEADLINE = HARD;
  PROCESS_CORRECT_ATTR.ENTRY_POINT = (SYSTEM_ADDRESS_TYPE)PROCESS_CORRECT;
  PROCESS_CORRECT_ATTR.STACK_SIZE =
      0; // We currently do not support restricting stack size in this emulator
  strncpy(PROCESS_CORRECT_ATTR.NAME, PROCESS_CORRECT_NAME, MAX_NAME_LENGTH);
  CREATE_PROCESS(&PROCESS_CORRECT_ATTR, &PROCESS_CORRECT_ID, &RETURN_CODE);
  if (RETURN_CODE == NO_ERROR) {
    LOGGER(APP, "Correct process test succeeded!");
    LOGGER(APP, "Return code is: %d", RETURN_CODE);
  } else {
    LOGGER(APP, "Correct process test failed.");
    LOGGER(APP, "Return code is: %d", RETURN_CODE);
  }
  START(PROCESS_CORRECT_ID, &RETURN_CODE);
}

void redundantProcessTest(void) {
  RETURN_CODE_TYPE RETURN_CODE;
  PROCESS_ID_TYPE PROCESS_REDUNDANT_ID;
  PROCESS_NAME_TYPE PROCESS_REDUNDANT_NAME = "PROCESS_REDUNDANT";

  // create the process REDUNDANT process with the name of a process that
  // already exists
  PROCESS_ATTRIBUTE_TYPE PROCESS_REDUNDANT_ATTR;
  PROCESS_REDUNDANT_ATTR.BASE_PRIORITY = 91;
  PROCESS_REDUNDANT_ATTR.PERIOD = convertSecsToNano(5);
  PROCESS_REDUNDANT_ATTR.TIME_CAPACITY = convertSecsToNano(5);
  PROCESS_REDUNDANT_ATTR.DEADLINE = HARD;
  PROCESS_REDUNDANT_ATTR.ENTRY_POINT = (SYSTEM_ADDRESS_TYPE)PROCESS_REDUNDANT;
  PROCESS_REDUNDANT_ATTR.STACK_SIZE =
      0; // We currently do not support restricting stack size in this emulator
  strncpy(PROCESS_REDUNDANT_ATTR.NAME, PROCESS_REDUNDANT_NAME, MAX_NAME_LENGTH);
  CREATE_PROCESS(&PROCESS_REDUNDANT_ATTR, &PROCESS_REDUNDANT_ID, &RETURN_CODE);
  CREATE_PROCESS(&PROCESS_REDUNDANT_ATTR, &PROCESS_REDUNDANT_ID,
                 &RETURN_CODE); // Attempts to create the process again
  if (RETURN_CODE == NO_ACTION) {
    LOGGER(APP, "Redundant process test succeeded!");
    LOGGER(APP, "Return code is: %d", RETURN_CODE);
  } else {
    LOGGER(APP, "Redundant process test failed.");
    LOGGER(APP, "Return code is: %d", RETURN_CODE);
  }
}

void invalidPriorityProcessTest(void) {
  RETURN_CODE_TYPE RETURN_CODE;
  PROCESS_ID_TYPE PROCESS_BAD_PRIORITY_ID;
  PROCESS_NAME_TYPE PROCESS_BAD_PRIORITY_NAME = "PROCESS_BAD_PRIORITY";

  // create the process BAD_PRIORITY process with priority out of range
  PROCESS_ATTRIBUTE_TYPE PROCESS_BAD_PRIORITY_ATTR;
  PROCESS_BAD_PRIORITY_ATTR.BASE_PRIORITY = 150;
  PROCESS_BAD_PRIORITY_ATTR.PERIOD = convertSecsToNano(5);
  PROCESS_BAD_PRIORITY_ATTR.TIME_CAPACITY = convertSecsToNano(5);
  PROCESS_BAD_PRIORITY_ATTR.DEADLINE = HARD;
  PROCESS_BAD_PRIORITY_ATTR.ENTRY_POINT =
      (SYSTEM_ADDRESS_TYPE)PROCESS_BAD_PRIORITY;
  PROCESS_BAD_PRIORITY_ATTR.STACK_SIZE =
      0; // We currently do not support restricting stack size in this emulator
  strncpy(PROCESS_BAD_PRIORITY_ATTR.NAME, PROCESS_BAD_PRIORITY_NAME,
          MAX_NAME_LENGTH);
  CREATE_PROCESS(&PROCESS_BAD_PRIORITY_ATTR, &PROCESS_BAD_PRIORITY_ID,
                 &RETURN_CODE);
  if (RETURN_CODE == INVALID_PARAM) {
    LOGGER(APP, "Invalid priority test succeeded!");
    LOGGER(APP, "Return code is: %d", RETURN_CODE);
  } else {
    LOGGER(APP, "Invalid priority test failed.");
    LOGGER(APP, "Return code is: %d", RETURN_CODE);
  }
}

// void invalidPeriodProcessTest(void){
//	RETURN_CODE_TYPE RETURN_CODE;
//	PROCESS_ID_TYPE PROCESS_BAD_PERIOD_ID;
//	PROCESS_NAME_TYPE PROCESS_BAD_PERIOD_NAME="PROCESS_BAD_PERIOD";
//
//	//create the process BAD_PERIOD process with period out of range
//	PROCESS_ATTRIBUTE_TYPE PROCESS_BAD_PERIOD_ATTR;
//	PROCESS_BAD_PERIOD_ATTR.BASE_PRIORITY=91;
//	PROCESS_BAD_PERIOD_ATTR.PERIOD= convertSecsToNano(3155692610);
//	PROCESS_BAD_PERIOD_ATTR.TIME_CAPACITY=convertSecsToNano(5);
//	PROCESS_BAD_PERIOD_ATTR.DEADLINE=HARD;
//	PROCESS_BAD_PERIOD_ATTR.ENTRY_POINT=(SYSTEM_ADDRESS_TYPE)PROCESS_BAD_PERIOD;
//	PROCESS_BAD_PERIOD_ATTR.STACK_SIZE=0; //We currently do not support
//restricting stack size in this emulator
//	strncpy(PROCESS_BAD_PERIOD_ATTR.NAME,PROCESS_BAD_PERIOD_NAME,MAX_NAME_LENGTH);
//	CREATE_PROCESS(&PROCESS_BAD_PERIOD_ATTR,&PROCESS_BAD_PERIOD_ID,&RETURN_CODE);
//	if(RETURN_CODE == INVALID_CONFIG) {
//		LOGGER(APP,"Invalid period test succeeded!");
//		LOGGER(APP,"Return code is: %d" ,RETURN_CODE);
//	}
//	else {
//		LOGGER(APP,"Invalid period test failed.");
//		LOGGER(APP,"Return code is: %d" ,RETURN_CODE);
//	}
//}

void invalidTimeCapacityProcessTest(void) {
  RETURN_CODE_TYPE RETURN_CODE;
  PROCESS_ID_TYPE PROCESS_BAD_TIME_CAPACITY_ID;
  PROCESS_NAME_TYPE PROCESS_BAD_TIME_CAPACITY_NAME =
      "PROCESS_BAD_TIME_CAPACITY";

  // create the process BAD_TIME_CAPACITY process with capacity out of range
  PROCESS_ATTRIBUTE_TYPE PROCESS_BAD_TIME_CAPACITY_ATTR;
  PROCESS_BAD_TIME_CAPACITY_ATTR.BASE_PRIORITY = 91;
  PROCESS_BAD_TIME_CAPACITY_ATTR.PERIOD = convertSecsToNano(5);
  PROCESS_BAD_TIME_CAPACITY_ATTR.TIME_CAPACITY = convertSecsToNano(315569261);
  PROCESS_BAD_TIME_CAPACITY_ATTR.DEADLINE = HARD;
  PROCESS_BAD_TIME_CAPACITY_ATTR.ENTRY_POINT =
      (SYSTEM_ADDRESS_TYPE)PROCESS_BAD_TIME_CAPACITY;
  PROCESS_BAD_TIME_CAPACITY_ATTR.STACK_SIZE =
      0; // We currently do not support restricting stack size in this emulator
  strncpy(PROCESS_BAD_TIME_CAPACITY_ATTR.NAME, PROCESS_BAD_TIME_CAPACITY_NAME,
          MAX_NAME_LENGTH);
  CREATE_PROCESS(&PROCESS_BAD_TIME_CAPACITY_ATTR, &PROCESS_BAD_TIME_CAPACITY_ID,
                 &RETURN_CODE);
  if (RETURN_CODE == INVALID_PARAM) {
    LOGGER(APP, "Invalid time capacity test succeeded!");
    LOGGER(APP, "Return code is: %d", RETURN_CODE);
  } else {
    LOGGER(APP, "Invalid time capacity test failed.");
    LOGGER(APP, "Return code is: %d", RETURN_CODE);
  }
}

void capacityGreaterThanPeriodTest(void) {
  RETURN_CODE_TYPE RETURN_CODE;
  PROCESS_ID_TYPE PROCESS_CAPACITY_GREATER_THAN_PERIOD_ID;
  PROCESS_NAME_TYPE PROCESS_CAPACITY_GREATER_THAN_PERIOD_NAME =
      "PROCESS_CAPACITY_GREATER_THAN_PERIOD";

  // create the process CAPACITY_GREATER_THAN_PERIOD process with capacity
  // greater than the period
  PROCESS_ATTRIBUTE_TYPE PROCESS_CAPACITY_GREATER_THAN_PERIOD_ATTR;
  PROCESS_CAPACITY_GREATER_THAN_PERIOD_ATTR.BASE_PRIORITY = 91;
  PROCESS_CAPACITY_GREATER_THAN_PERIOD_ATTR.PERIOD = convertSecsToNano(5);
  PROCESS_CAPACITY_GREATER_THAN_PERIOD_ATTR.TIME_CAPACITY =
      convertSecsToNano(6);
  PROCESS_CAPACITY_GREATER_THAN_PERIOD_ATTR.DEADLINE = HARD;
  PROCESS_CAPACITY_GREATER_THAN_PERIOD_ATTR.ENTRY_POINT =
      (SYSTEM_ADDRESS_TYPE)PROCESS_CAPACITY_GREATER_THAN_PERIOD;
  PROCESS_CAPACITY_GREATER_THAN_PERIOD_ATTR.STACK_SIZE =
      0; // We currently do not support restricting stack size in this emulator
  strncpy(PROCESS_CAPACITY_GREATER_THAN_PERIOD_ATTR.NAME,
          PROCESS_CAPACITY_GREATER_THAN_PERIOD_NAME, MAX_NAME_LENGTH);
  CREATE_PROCESS(&PROCESS_CAPACITY_GREATER_THAN_PERIOD_ATTR,
                 &PROCESS_CAPACITY_GREATER_THAN_PERIOD_ID, &RETURN_CODE);
  if (RETURN_CODE == INVALID_PARAM) {
    LOGGER(APP, "Capacity greater than period test succeeded!");
    LOGGER(APP, "Return code is: %d", RETURN_CODE);
  } else {
    LOGGER(APP, "Capacity greater than period test failed.");
    LOGGER(APP, "Return code is: %d", RETURN_CODE);
  }
}

int main() {
  // SET_PARTITION_NAME. Required for Log Identification
  SET_PARTITION_NAME("TESTING_PROCESS_SCHEDULING");

  RETURN_CODE_TYPE RETURN_CODE;

  // create the process INVALID_MODE process with no invalid parameters
  PROCESS_INVALID_MODE_ATTR.BASE_PRIORITY = 91;
  PROCESS_INVALID_MODE_ATTR.PERIOD = convertSecsToNano(5);
  PROCESS_INVALID_MODE_ATTR.TIME_CAPACITY = convertSecsToNano(5);
  PROCESS_INVALID_MODE_ATTR.DEADLINE = HARD;
  PROCESS_INVALID_MODE_ATTR.ENTRY_POINT =
      (SYSTEM_ADDRESS_TYPE)PROCESS_INVALID_MODE;
  PROCESS_INVALID_MODE_ATTR.STACK_SIZE =
      0; // We currently do not support restricting stack size in this emulator
  strncpy(PROCESS_INVALID_MODE_ATTR.NAME, PROCESS_INVALID_MODE_NAME,
          MAX_NAME_LENGTH);

  correctProcessTest();
  redundantProcessTest();
  invalidPriorityProcessTest();
  // invalidPeriodProcessTest();
  invalidTimeCapacityProcessTest();
  capacityGreaterThanPeriodTest();
  SET_PARTITION_MODE(NORMAL, &RETURN_CODE);

  return 0;
}