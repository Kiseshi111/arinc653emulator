/*
Test of the STOP_SELF service
*/
#include <ACM/USER/ACM_USER_INCLUDE.h>
using namespace ACM_USER;
PROCESS_ID_TYPE PROCESS_APERIODIC_ID;
PROCESS_NAME_TYPE PROCESS_APERIODIC_NAME = "PROCESS_APERIODIC";
PROCESS_ID_TYPE PROCESS_PERIODIC_ID;
PROCESS_NAME_TYPE PROCESS_PERIODIC_NAME = "PROCESS_PERIODIC";
RETURN_CODE_TYPE RETURN_CODE;
int i = 0;

void PROCESS_APERIODIC(void) {
  LOGGER(APP, "APERIODIC STARTED");
  TIMED_WAIT(convertSecsToNano(4), &RETURN_CODE);
  LOGGER(APP, "Stopping Myself");
  STOP_SELF;
}

void PROCESS_PERIODIC(void) {
  RETURN_CODE_TYPE PERIODIC_RETURN;
  PROCESS_STATUS_TYPE APERIODIC_STATUS;
  GET_PROCESS_STATUS(PROCESS_APERIODIC_ID, &APERIODIC_STATUS, &PERIODIC_RETURN);
  if (i == 5) {
    // Tests if the process stopped itself correctly
    if (APERIODIC_STATUS.PROCESS_STATE == DORMANT) {
      LOGGER(APP, "Stop self test succeeded!");
      LOGGER(APP, "APERIODIC state is: %d", APERIODIC_STATUS.PROCESS_STATE);
    } else {
      LOGGER(APP, "Stop self test failed.");
      LOGGER(APP, "APERIODIC state is: %d", APERIODIC_STATUS.PROCESS_STATE);
    }
    STOP_SELF;
  }
  i++;
}

int main() {
  // SET_PARTITION_NAME. Required for Log Identification
  SET_PARTITION_NAME("TESTING_PROCESS_SCHEDULING");

  RETURN_CODE_TYPE WAIT_RETURN; // to be used in the while loops

  //! A dummy process fills in the idle gap in the scheduling window.
  // It is necessary to implement suspend service properly.
  // Note: You can get rid of dummy process if you do not use suspend and resume
  // services.
  // APEX_HELPER_CREATE_AND_START_DUMMY_PROCESS(&RETURN_CODE);

  // create the process APERIODIC process
  PROCESS_ATTRIBUTE_TYPE PROCESS_APERIODIC_ATTR;
  PROCESS_APERIODIC_ATTR.BASE_PRIORITY = 90;
  PROCESS_APERIODIC_ATTR.PERIOD = INFINITE_TIME_VALUE; // APeriodic
  PROCESS_APERIODIC_ATTR.TIME_CAPACITY = INFINITE_TIME_VALUE;
  PROCESS_APERIODIC_ATTR.DEADLINE = HARD;
  PROCESS_APERIODIC_ATTR.ENTRY_POINT = (SYSTEM_ADDRESS_TYPE)PROCESS_APERIODIC;
  PROCESS_APERIODIC_ATTR.STACK_SIZE =
      0; // We currently do not support restricting stack size in this emulator
  strncpy(PROCESS_APERIODIC_ATTR.NAME, PROCESS_APERIODIC_NAME, MAX_NAME_LENGTH);
  CREATE_PROCESS(&PROCESS_APERIODIC_ATTR, &PROCESS_APERIODIC_ID, &RETURN_CODE);

  // start the process aPERIODIC
  START(PROCESS_APERIODIC_ID, &RETURN_CODE);

  // create the process PERIODIC process
  PROCESS_ATTRIBUTE_TYPE PROCESS_PERIODIC_ATTR;
  PROCESS_PERIODIC_ATTR.BASE_PRIORITY = 90;
  PROCESS_PERIODIC_ATTR.PERIOD = convertSecsToNano(1);
  PROCESS_PERIODIC_ATTR.TIME_CAPACITY = convertSecsToNano(1);
  PROCESS_PERIODIC_ATTR.DEADLINE = HARD;
  PROCESS_PERIODIC_ATTR.ENTRY_POINT = (SYSTEM_ADDRESS_TYPE)PROCESS_PERIODIC;
  PROCESS_PERIODIC_ATTR.STACK_SIZE =
      0; // We currently do not support restricting stack size in this emulator
  strncpy(PROCESS_PERIODIC_ATTR.NAME, PROCESS_PERIODIC_NAME, MAX_NAME_LENGTH);
  CREATE_PROCESS(&PROCESS_PERIODIC_ATTR, &PROCESS_PERIODIC_ID, &RETURN_CODE);

  // start the process PERIODIC
  START(PROCESS_PERIODIC_ID, &RETURN_CODE);

  // Setting partition mode. This will start the partition.
  LOGGER(APP, "Setting Partition State", APP);
  SET_PARTITION_MODE(NORMAL, &RETURN_CODE);

  return 0;
}